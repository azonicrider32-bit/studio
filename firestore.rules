/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/assets/{assetId}: Stores assets owned by a specific user, accessible only to that user.
 * - /users/{userId}/performanceLogs/{logId}: Stores performance logs for a specific user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Data is segregated by user ID to simplify rules and improve performance.
 * - List operations are restricted to the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      //function isOwner(userId) {
      //  return request.auth != null && request.auth.uid == userId;
      //}
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-level access control for assets.
     * @path /users/{userId}/assets/{assetId}
     * @allow (create) User with ID 'user123' can create an asset under their profile.
     * @allow (get) User with ID 'user123' can read an asset under their profile.
     * @allow (update) User with ID 'user123' can update an asset under their profile.
     * @allow (delete) User with ID 'user123' can delete an asset under their profile.
     * @deny (create) User with ID 'user456' cannot create an asset under 'user123's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/assets/{assetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-level access control for performance logs.
     * @path /users/{userId}/performanceLogs/{logId}
     * @allow (create) User with ID 'user123' can create a performance log under their profile.
     * @allow (get) User with ID 'user123' can read a performance log under their profile.
     * @allow (update) User with ID 'user123' can update a performance log under their profile.
     * @allow (delete) User with ID 'user123' can delete a performance log under their profile.
     * @deny (create) User with ID 'user456' cannot create a performance log under 'user123's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/performanceLogs/{logId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }
  }
}